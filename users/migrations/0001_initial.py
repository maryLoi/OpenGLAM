# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-14 22:03
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hebrew_display_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='display name (Hebrew)')),
                ('english_display_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='display name (English)')),
                ('team_member', models.BooleanField(default=False, verbose_name='team member')),
                ('community_member', models.BooleanField(default=False, verbose_name='community member')),
                ('community_name', models.CharField(blank=True, max_length=120, null=True, verbose_name='Hebrew name (as seen by community)')),
                ('community_email', models.EmailField(blank=True, help_text='can be left empty.', max_length=254, null=True, verbose_name='Email (as seen by other community members)')),
                ('community_contact_phone', models.CharField(blank=True, help_text='can be left empty.', max_length=120, null=True, verbose_name='Phone number (as seen by other community members)')),
                ('community_personal_info', models.TextField(blank=True, help_text='Share something about yourself!', null=True, verbose_name='Personal info (as seen by other community members)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ('-is_superuser', '-is_staff', '-last_login', 'hebrew_display_name', 'email'),
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254)),
                ('code', models.CharField(max_length=32, unique=True)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hebrew_first_name', models.CharField(max_length=200, verbose_name='first name (Hebrew)')),
                ('hebrew_last_name', models.CharField(max_length=200, verbose_name='last name (Hebrew)')),
                ('english_first_name', models.CharField(max_length=200, verbose_name='first name (English)')),
                ('english_last_name', models.CharField(max_length=200, verbose_name='last name (English)')),
                ('gender', models.IntegerField(choices=[(1, 'female'), (2, 'male'), (3, 'prefer not to answer')], default=3, help_text='we would like to create a diverse group.', verbose_name='gender')),
                ('main_phone', models.CharField(max_length=50, verbose_name='main phone number')),
                ('alt_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='alternate phone number')),
                ('city', models.CharField(blank=True, max_length=200, null=True, verbose_name='city')),
                ('address', models.TextField(blank=True, help_text='street and number', null=True, verbose_name='address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'pesronal info',
                'verbose_name_plural': 'pesronal infos',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('group', models.IntegerField(choices=[(-100, 'red'), (0, 'gray'), (100, 'bronze'), (200, 'silver'), (300, 'gold')], default=0, verbose_name='group')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ['-group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField(null=True)),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('operation', models.IntegerField(choices=[(0, 'Other'), (1, 'Add'), (2, 'Change'), (3, 'Remove')], default=0)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('visible_to_user', models.BooleanField(default=False, verbose_name='visible to user')),
                ('content', models.TextField(verbose_name='content')),
                ('sent_to_user_at', models.DateTimeField(blank=True, null=True)),
                ('is_open', models.BooleanField(verbose_name='open')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='closed at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_authored', to=settings.AUTH_USER_MODEL)),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user note',
                'verbose_name_plural': 'user notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags_created', to=settings.AUTH_USER_MODEL)),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='users.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='usertag',
            unique_together=set([('user', 'tag')]),
        ),
    ]
